{
  "version": 3,
  "sources": ["../cards.ts"],
  "sourcesContent": ["import chalk from 'chalk';\nimport fs from 'fs';\n\nimport { box, button, heading } from './components';\n\ninterface Card {\n  id: number,\n  question: string,\n  answer: string,\n  lastReviewed: Date,\n  nextReview: Date,\n  interval: number,\n  easeFactor: number,\n  repetitions: number,\n  difficulty: number\n}\n\nfunction ankiEaseFactor(card: Card, difficulty: number): number {\n  const minEaseFactor = 1.3\n  const maxEaseFactor = 2.5\n  let newEaseFactor = card.easeFactor + (0.1 - (5 - difficulty) * (0.08 + (5 - difficulty) * 0.02))\n  if (newEaseFactor < minEaseFactor) {\n    newEaseFactor = minEaseFactor\n  } else if (newEaseFactor > maxEaseFactor) {\n    newEaseFactor = maxEaseFactor\n  }\n  return newEaseFactor\n}\n\nfunction ankiInterval(card: Card): number {\n  // @ts-ignore\n  return ({\n    0: 1,\n    1: 6,\n  }[card.repetitions]) || Math.round(card.interval * card.easeFactor)\n}\n\nexport function reviewCard(card: Card, difficulty: number): Card {\n  const now = new Date()\n  const newInterval = ankiInterval(card)\n  const newEF = ankiEaseFactor(card, difficulty)\n  const offset = now.getTime() + newInterval * 24 * 3600 * 1000\n  console.log(offset)\n  const newNextReview = new Date(offset)\n\n  card.lastReviewed = now\n  card.interval = newInterval\n  card.easeFactor = newEF\n  card.nextReview = newNextReview\n  card.repetitions++\n  card.difficulty = difficulty\n\n  return card\n}\n\nconst loadCards = (filePath: string) => {\n  return require(filePath).cards.map((card: any) => {\n    return {\n      ...card,\n      lastReviewed: new Date(card.lastReviewed),\n      nextReview: new Date(card.nextReview),\n    }\n  });\n}\n\n// function that accepts an array of cards and writes them to a fileas a JSON object\nexport function writeCards(cards: Card[]) {\n  const cardsJSON = JSON.stringify({cards}, null, 2)\n  fs.writeFileSync('./cards.json', cardsJSON);\n}\n\nconst createReviewDeck = (cards: Card[]) => {\n  return cards.map(card => {\n    return {\n      front: front(card),\n      back: back(card),\n      flipped: false,\n      card\n    }\n  })\n}\n\nexport const getCardsForReview = (filePath: string) => {\n  const rawCards = loadCards(filePath);\n  return createReviewDeck(rawCards);\n}\n\nconst front = (card: Card) => {\n  const cardView = box(card.question)\n  heading(chalk.bold.yellow('Question:'), cardView)\n  button(chalk.bold.green('(space) - Flip'), cardView) \n  return cardView;\n}\n\nconst back = (card: Card) => {\n  const cardView = box(card.answer)\n  heading(chalk.bold.yellow('Answer:'), cardView)\n  button(chalk.bgGreen('1')+chalk.bgYellow('2')+chalk.bgRed('3'), cardView) \n  return cardView;\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,gBAAe;AAEf,wBAAqC;AAcrC,SAAS,eAAe,MAAY,YAA4B;AAC9D,QAAM,gBAAgB;AACtB,QAAM,gBAAgB;AACtB,MAAI,gBAAgB,KAAK,cAAc,OAAO,IAAI,eAAe,QAAQ,IAAI,cAAc;AAC3F,MAAI,gBAAgB,eAAe;AACjC,oBAAgB;AAAA,EAClB,WAAW,gBAAgB,eAAe;AACxC,oBAAgB;AAAA,EAClB;AACA,SAAO;AACT;AAEA,SAAS,aAAa,MAAoB;AAExC,SAAQ;AAAA,IACN,GAAG;AAAA,IACH,GAAG;AAAA,EACL,EAAE,KAAK,gBAAiB,KAAK,MAAM,KAAK,WAAW,KAAK,UAAU;AACpE;AAEO,SAAS,WAAW,MAAY,YAA0B;AAC/D,QAAM,MAAM,IAAI,KAAK;AACrB,QAAM,cAAc,aAAa,IAAI;AACrC,QAAM,QAAQ,eAAe,MAAM,UAAU;AAC7C,QAAM,SAAS,IAAI,QAAQ,IAAI,cAAc,KAAK,OAAO;AACzD,UAAQ,IAAI,MAAM;AAClB,QAAM,gBAAgB,IAAI,KAAK,MAAM;AAErC,OAAK,eAAe;AACpB,OAAK,WAAW;AAChB,OAAK,aAAa;AAClB,OAAK,aAAa;AAClB,OAAK;AACL,OAAK,aAAa;AAElB,SAAO;AACT;AAEA,MAAM,YAAY,CAAC,aAAqB;AACtC,SAAO,QAAQ,QAAQ,EAAE,MAAM,IAAI,CAAC,SAAc;AAChD,WAAO;AAAA,MACL,GAAG;AAAA,MACH,cAAc,IAAI,KAAK,KAAK,YAAY;AAAA,MACxC,YAAY,IAAI,KAAK,KAAK,UAAU;AAAA,IACtC;AAAA,EACF,CAAC;AACH;AAGO,SAAS,WAAW,OAAe;AACxC,QAAM,YAAY,KAAK,UAAU,EAAC,MAAK,GAAG,MAAM,CAAC;AACjD,YAAAA,QAAG,cAAc,gBAAgB,SAAS;AAC5C;AAEA,MAAM,mBAAmB,CAAC,UAAkB;AAC1C,SAAO,MAAM,IAAI,UAAQ;AACvB,WAAO;AAAA,MACL,OAAO,MAAM,IAAI;AAAA,MACjB,MAAM,KAAK,IAAI;AAAA,MACf,SAAS;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEO,MAAM,oBAAoB,CAAC,aAAqB;AACrD,QAAM,WAAW,UAAU,QAAQ;AACnC,SAAO,iBAAiB,QAAQ;AAClC;AAEA,MAAM,QAAQ,CAAC,SAAe;AAC5B,QAAM,eAAW,uBAAI,KAAK,QAAQ;AAClC,iCAAQ,aAAAC,QAAM,KAAK,OAAO,WAAW,GAAG,QAAQ;AAChD,gCAAO,aAAAA,QAAM,KAAK,MAAM,gBAAgB,GAAG,QAAQ;AACnD,SAAO;AACT;AAEA,MAAM,OAAO,CAAC,SAAe;AAC3B,QAAM,eAAW,uBAAI,KAAK,MAAM;AAChC,iCAAQ,aAAAA,QAAM,KAAK,OAAO,SAAS,GAAG,QAAQ;AAC9C,gCAAO,aAAAA,QAAM,QAAQ,GAAG,IAAE,aAAAA,QAAM,SAAS,GAAG,IAAE,aAAAA,QAAM,MAAM,GAAG,GAAG,QAAQ;AACxE,SAAO;AACT;",
  "names": ["fs", "chalk"]
}
